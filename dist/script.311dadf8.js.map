{"version":3,"sources":["script.js"],"names":["canvass","document","querySelectorAll","canvas","ctx","getContext","width","window","innerWidth","height","random","min","max","Math","floor","Ball","x","y","velX","velY","color","size","beginPath","fillStyle","arc","PI","fill","balls","length","ball","push","loop","fillRect","draw","update","requestAnimationFrame","aside","querySelector","scene","THREE","Scene","camera","PerspectiveCamera","innerHeight","position","z","renderer","WebGLRenderer","setSize","clientWidth","clientHeight","add","body","appendChild","domElement","cube","loader","TextureLoader","images","image","load","texture","repeat","set","geometry","BoxGeometry","material","MeshLambertMaterial","map","Mesh","light","AmbientLight","rotation","render"],"mappings":"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","file":"script.311dadf8.js","sourceRoot":"..\\src","sourcesContent":["const canvass = document.querySelectorAll(\"canvas\");\nfor (const canvas of canvass) {\n  const ctx = canvas.getContext(\"2d\");\n\n  const width = (canvas.width = window.innerWidth);\n  const height = (canvas.height = 300);\n\n  function random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function randomRGB() {\n    return `rgba(${random(0, 255)},${random(0, 255)},${random(0, 255)},${random(\n      0,\n      1\n    )})`;\n  }\n\n  class Ball {\n    constructor(x, y, velX, velY, color, size) {\n      this.x = x;\n      this.y = y;\n      this.velX = velX;\n      this.velY = velY;\n      this.color = color;\n      this.size = size;\n    }\n    draw() {\n      ctx.beginPath();\n      ctx.fillStyle = this.color;\n      ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\n      ctx.fill();\n    }\n\n    update() {\n      if (this.x + this.size >= width) {\n        this.velX = -this.velX;\n      }\n\n      if (this.x - this.size <= 0) {\n        this.velX = -this.velX;\n      }\n\n      if (this.y + this.size >= height) {\n        this.velY = -this.velY;\n      }\n\n      if (this.y - this.size <= 0) {\n        this.velY = -this.velY;\n      }\n\n      this.x += 0.1 * this.velX;\n      this.y += 0.1 * this.velY;\n    }\n  }\n\n  const balls = [];\n\n  while (balls.length < 300) {\n    const size = random(0, 1);\n    const ball = new Ball(\n      // ball position always drawn at least one ball width\n      // away from the edge of the canvas, to avoid drawing errors\n      random(0 + size, width - size),\n      random(0 + size, height - size),\n      random(-7, 7),\n      random(-7, 7),\n      randomRGB(),\n      size\n    );\n\n    balls.push(ball);\n  }\n  function loop() {\n    ctx.fillStyle = `${\"rgba(10, 2, 4,0.2)\"}`;\n    ctx.fillRect(0, 0, width, height);\n\n    for (const ball of balls) {\n      ball.draw();\n      ball.update();\n    }\n\n    requestAnimationFrame(loop);\n  }\n  loop();\n}\n\n//3D cube\nconst aside = document.querySelector(\"aside\");\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  1000\n);\ncamera.position.z = 5;\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(aside.clientWidth, aside.clientHeight);\nconst add = document.body.appendChild(renderer.domElement);\n\nlet cube = [];\n\nconst loader = new THREE.TextureLoader();\nconst images = [\"images/about2.png\"];\nfor (const image of images) {\n  loader.load(`${image}`, (texture) => {\n    texture.repeat.set(1, 1);\n\n    const geometry = new THREE.BoxGeometry(3, 3, 3);\n    const material = new THREE.MeshLambertMaterial({ map: texture });\n    cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    draw();\n  });\n}\n\nconst light = new THREE.AmbientLight(\"rgb(255,255,255)\"); // soft white light\nscene.add(light);\n\n/*const spotLight = new THREE.SpotLight('rgb(255,255,255)');\nspotLight.position.set( 100, 1000, 1000 );\nspotLight.castShadow = true;\nscene.add(spotLight);*/\n\nfunction draw() {\n  cube.rotation.x += 0.01;\n  cube.rotation.y += 0.01;\n  renderer.render(scene, camera);\n  cube.rotation.x -= 0.007;\n  cube.rotation.y -= 0.007;\n  requestAnimationFrame(draw);\n}\n\naside.appendChild(add);\n"]}